{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption } from '@shopify/polaris';\n\nconst mapStateToProps = state => {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nclass View extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 1,\n      SaturatedF: 345\n    };\n  }\n\n  render() {\n    var q = this.state.units * this.props.Weight / 200;\n    return __jsx(Card, {\n      className: \"View\"\n    }, __jsx(\"div\", {\n      itemtype: \"http://schema.org/NutritionInformation\",\n      className: \"nf us\"\n    }, __jsx(Caption, null, \" className=\\\"nf-title\\\">Nutrition Facts\"), __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"div\", {\n      className: \"nf-serving\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      \"data-role\": \"none\",\n      onChange: event => this.setState({\n        units: event.target.value\n      }),\n      value: this.state.units,\n      \"aria-label\": \"Change the Quantity Textbox\",\n      className: \"nf-modifier-field\"\n    }), __jsx(\"div\", {\n      className: \"nf-item-name\"\n    }, __jsx(\"div\", null, \"serving (\", this.state.units * this.props.Weight, \")\")))), __jsx(\"div\", {\n      className: \"nf-bar2\"\n    }), __jsx(\"div\", {\n      className: \"nf-amount-per-serving\"\n    }, \"Amount Per Serving\"), __jsx(\"div\", {\n      className: \"nf-calories\"\n    }, __jsx(Caption, null, \"Calories\"), __jsx(\"span\", {\n      itemprop: \"calories\",\n      className: \"nf-pr\"\n    }, q * Math.floor(this.props.Calories))), __jsx(DescriptionList, {\n      items: [{\n        term: 'Calories',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Sole proprietorship',\n        description: `${this.props.Calories}`\n      }]\n    }), __jsx(\"div\", {\n      className: \"nf-bar1\"\n    }), __jsx(\"div\", {\n      className: \"nf-line nf-text-right\"\n    }, __jsx(\"span\", {\n      className: \"nf-highlight nf-percent-dv\"\n    }, \"%\", __jsx(\"span\", null, \"Daily Value\"), \"*\")), __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, \"75%\"), __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Total Fat\"), __jsx(\"span\", {\n      itemprop: \"fatContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line nf-indent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69)), \"%\"), __jsx(\"span\", null, \"Saturated Fat\"), __jsx(\"span\", {\n      itemprop: \"saturatedFatContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line nf-indent\"\n    }, __jsx(\"span\", null, \"Trans Fat\"), __jsx(\"span\", {\n      itemprop: \"transFatContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"  \", this.state.units * this.props.TransFat, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (3 + Math.floor((this.props.Cholesterol - 10) / 3)), \"%\"), __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Cholesterol\"), __jsx(\"span\", {\n      itemprop: \"cholesterolContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * this.props.Cholesterol, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"))), __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20)), \"%\"), __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Sodium\"), __jsx(\"span\", {\n      itemprop: \"sodiumContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * Math.floor(this.props.Sodium), \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"))), __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3)), \"%\"), __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Total Carbohydrates\"), __jsx(\"span\", {\n      itemprop: \"carbohydrateContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * Math.floor(this.props.Carbohydrate), \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line nf-indent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (60 + (Math.floor(this.props.Fiber) - 15) * 4), \"%\"), __jsx(\"span\", null, \"Dietary Fiber\"), __jsx(\"span\", {\n      itemprop: \"fiberContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * Math.floor(this.props.Fiber), \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line nf-indent\"\n    }, __jsx(\"span\", null, \"Sugars\"), __jsx(\"span\", {\n      itemprop: \"sugarContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * Math.floor(this.props.Sugars), \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-line nf-indent2\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-highlight nf-pr\"\n    }, this.state.units * (2 * this.props.AddedSugars), \"%\"), __jsx(\"span\", null, __jsx(\"span\", null, \"Includes\"), \" \", __jsx(\"span\", {\n      itemprop: \"\"\n    }, this.state.units * this.props.AddedSugars, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"span\", null, \"Added Sugars\"))), \" \", __jsx(\"div\", {\n      className: \"nf-line\"\n    }, __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Protein\"), __jsx(\"span\", {\n      itemprop: \"proteinContent\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, this.state.units * Math.floor(this.props.Protein), \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\"))), __jsx(\"div\", {\n      className: \"nf-bar2\"\n    }), \" \", __jsx(\"div\", {\n      className: \"nf-vitamins\"\n    }, __jsx(\"div\", {\n      className: \"nf-vitamins\"\n    }, __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Vitamin A\"), 50 * this.props.A, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"IU\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" International Unit\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, this.state.units * this.props.A, \"%\")), __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Vitamin C\"), \" 50\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, \"83%\")), __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Vitamin D\"), \" 0\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mcg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" micrograms\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, \"0%\")), __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Calcium\"), \" \", this.state.units * this.props.Calcium * 10 + 110, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, this.state.units * this.props.Calcium, \"%\")), __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Iron\"), Math.floor(this.state.units * this.props.Iron / 6), __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, this.state.units * this.props.Iron, \"%\")), __jsx(\"div\", {\n      className: \"nf-vitamin-column\"\n    }, __jsx(\"span\", null, \"Potassium\"), \" 5120\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"nf-pr\"\n    }, this.state.units * this.props.Potassium, \"%\")))), __jsx(\"div\", {\n      className: \"nf-bar1\"\n    }), \" \", __jsx(\"div\", null, __jsx(\"span\", {\n      className: \"nf-highlight\"\n    }, \"Caffeine\"), \" \", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"mg\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" milligrams\")), \" \", __jsx(\"div\", {\n      className: \"nf-bar2\"\n    }), \" \", __jsx(\"div\", {\n      className: \"nf-footnote\"\n    }, __jsx(\"span\", null, \"The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\"), __jsx(\"div\", {\n      className: \"nf-ingredient-statement\"\n    }, __jsx(\"strong\", null, \"Ingredients:\"), __jsx(\"div\", null, \"Swiss cheese, American cheese, more cheese and a burger.\")))));\n  }\n\n}\n\nexport default connect(mapStateToProps)(View);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/View.js"],"names":["React","Component","Button","Layout","connect","Card","Caption","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","View","constructor","props","units","SaturatedF","render","q","event","setState","target","value","Math","floor","term","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <Card className=\"View\">\n                <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf us\">\n\n                    <Caption> className=\"nf-title\">Nutrition Facts</Caption>\n\n                    <div className=\"nf-line\">\n                        <div className=\"nf-serving\">\n                            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units} aria-label=\"Change the Quantity Textbox\" className=\"nf-modifier-field\"></input>\n                            <div className=\"nf-item-name\">\n                                <div>\n                                    serving ({this.state.units * (this.props.Weight)})\n                                    </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"nf-bar2\"></div>\n                    <div className=\"nf-amount-per-serving\">Amount Per Serving</div>\n\n                    <div className=\"nf-calories\">\n                        <Caption>Calories</Caption>\n                        <span itemprop=\"calories\" className=\"nf-pr\">{q * (Math.floor(this.props.Calories))}</span>\n                    </div>\n                    <DescriptionList\n                        items={[\n                            {\n                                term: 'Calories',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Sole proprietorship',\n                                description: `${this.props.Calories}`\n                            }\n                        ]}\n                    />\n\n                    <div className=\"nf-bar1\"></div>\n                    <div className=\"nf-line nf-text-right\">\n                        <span className=\"nf-highlight nf-percent-dv\">%\n                            <span>Daily Value</span>*</span></div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">75%</span>\n                        <span className=\"nf-highlight\">Total Fat</span>\n                        <span itemprop=\"fatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%</span>\n                        <span>Saturated Fat</span>\n                        <span itemprop=\"saturatedFatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Trans Fat</span>\n                        <span itemprop=\"transFatContent\">\n                            <span aria-hidden=\"true\">  {this.state.units * this.props.TransFat}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (3 + Math.floor((this.props.Cholesterol - 10) / 3))}%</span>\n                        <span className=\"nf-highlight\">Cholesterol</span>\n                        <span itemprop=\"cholesterolContent\">\n                            <span aria-hidden=\"true\">{this.state.units * this.props.Cholesterol}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20))}%</span>\n                        <span className=\"nf-highlight\">Sodium</span>\n                        <span itemprop=\"sodiumContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Sodium))}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3))}%</span>\n                        <span className=\"nf-highlight\">Total Carbohydrates</span>\n                        <span itemprop=\"carbohydrateContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Carbohydrate))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (60 + (Math.floor(this.props.Fiber) - 15) * 4)}%</span>\n                        <span>Dietary Fiber</span>\n                        <span itemprop=\"fiberContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Fiber))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span></div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Sugars</span>\n                        <span itemprop=\"sugarContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Sugars))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent2\"><span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (2 * this.props.AddedSugars)}%</span>\n                        <span><span>Includes</span> <span itemprop=\"\">{this.state.units * this.props.AddedSugars}<span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></span>\n                            <span>Added Sugars</span></span></div> <div className=\"nf-line\"><span className=\"nf-highlight\">Protein</span>\n                        <span itemprop=\"proteinContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Protein))}g</span><span className=\"sr-only\"> grams</span></span></div>\n                    <div className=\"nf-bar2\"></div> <div className=\"nf-vitamins\"><div className=\"nf-vitamins\">\n                        <div className=\"nf-vitamin-column\"><span>Vitamin A</span>{50 * this.props.A}<span aria-hidden=\"true\">IU</span>\n                            <span className=\"sr-only\"> International Unit</span> <span aria-hidden=\"true\" className=\"nf-pr\">{this.state.units * (this.props.A)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin C</span> 50<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">83%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin D</span> 0<span aria-hidden=\"true\">mcg</span>\n                            <span className=\"sr-only\"> micrograms</span> <span aria-hidden=\"true\" className=\"nf-pr\">0%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Calcium</span> {this.state.units * this.props.Calcium * 10 + 110}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Calcium)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Iron</span>{Math.floor(this.state.units * this.props.Iron / 6)}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Iron)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Potassium</span> 5120<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Potassium)}%</span></div></div></div>\n                    <div className=\"nf-bar1\"></div> <div><span className=\"nf-highlight\">Caffeine</span> <span aria-hidden=\"true\">mg</span>\n                        <span className=\"sr-only\"> milligrams</span></div> <div className=\"nf-bar2\"></div> <div className=\"nf-footnote\"><span>\n                            The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.</span>\n                        <div className=\"nf-ingredient-statement\">\n                            <strong>Ingredients:</strong>\n                            <div>Swiss cheese, American cheese, more cheese and a burger.</div>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n"]},"metadata":{},"sourceType":"module"}