{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextContainer, TextField, DataTable, TextStyle } from '@shopify/polaris';\n\nconst mapStateToProps = state => {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nclass View extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 1,\n      SaturatedF: 345\n    };\n  }\n\n  render() {\n    var q = this.state.units * this.props.Weight / 200;\n    return __jsx(Card, {\n      title: \"Nutrition Facts\"\n    }, __jsx(Card.Section, null, __jsx(TextField, {\n      type: \"number\",\n      style: {\n        width: '20px'\n      },\n      onChange: event => this.setState({\n        units: event.target.value\n      }),\n      value: this.state.units\n    }), __jsx(TextContainer, null, \"serving (\", this.state.units * this.props.Weight, \"g)\")), __jsx(Card.Section, {\n      title: \"Amount Per Serving\"\n    }, __jsx(DescriptionList, {\n      items: [{\n        term: `Calories`,\n        description: `${this.props.Calories}`\n      }]\n    })), __jsx(Card.Section, null, __jsx(DescriptionList, {\n      items: [{\n        term: `Total Fat ${this.props.TotalFat}`,\n        description: `${this.props.Calories}`\n      }, {\n        term: `Saturated Fat  ${this.props.SaturatedFat}`,\n        description: `${this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%`,\n        a: `asds%`\n      }, {\n        term: 'Trans Fat',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Cholesterol ',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Sodium ',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Total Carbohydrates\\n',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Dietary Fiber ',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Includes 0ggrams Added Sugars',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Protein ',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Vitamin A 50IU',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Vitamin C 50IU',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Vitamin D 50IU',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Calcium 460mg',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Potassium 4700mg',\n        description: `${this.props.Calories}`\n      }, {\n        term: 'Caffeine mg',\n        description: `${this.props.Calories}`\n      }]\n    })), __jsx(Card.Section, null, __jsx(TextContainer, null, \"The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\", __jsx(Caption, null, \"Ingredients:\"), \"Swiss cheese, American cheese, more cheese and a burger.\")));\n  }\n\n}\n\nexport default connect(mapStateToProps)(View);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/View.js"],"names":["React","Component","Button","Layout","connect","Card","Caption","DescriptionList","TextContainer","TextField","DataTable","TextStyle","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","View","constructor","props","units","SaturatedF","render","q","width","event","setState","target","value","term","description","Math","floor","a"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextContainer, TextField, DataTable, TextStyle } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <Card title='Nutrition Facts'>\n                <Card.Section>\n                    <TextField type=\"number\" style={{ width: '20px' }} onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units}></TextField>\n                    <TextContainer>serving ({this.state.units * (this.props.Weight)}g)</TextContainer>\n                </Card.Section>\n\n                <Card.Section title='Amount Per Serving'>\n                <DescriptionList\n                        items={[\n                            {\n                                term: `Calories`,\n                                description:\n                                    `${this.props.Calories}`\n                            }]}/>\n                </Card.Section>\n\n                <Card.Section>\n                    <DescriptionList\n                        items={[\n                            {\n                                term: `Total Fat ${this.props.TotalFat}`,\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: `Saturated Fat  ${this.props.SaturatedFat}`,\n                                description: `${this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%`,\n                                a: `asds%`\n\n                            },\n                            {\n                                term: 'Trans Fat',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Cholesterol ',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Sodium ',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Total Carbohydrates\\n',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Dietary Fiber ',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Includes 0ggrams Added Sugars',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Protein ',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin A 50IU',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin C 50IU',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin D 50IU',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Calcium 460mg',\n                                description:`${this.props.Calories}`\n                            },\n                            {\n                                term: 'Potassium 4700mg',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Caffeine mg',\n                                description:`${this.props.Calories}`\n                            }\n                        ]}\n                    />\n\n                </Card.Section>\n\n                <Card.Section>\n                    <TextContainer>\n                        The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\n                        <Caption>Ingredients:</Caption>\n                        Swiss cheese, American cheese, more cheese and a burger.\n                        </TextContainer>\n\n                </Card.Section>\n\n            </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n"]},"metadata":{},"sourceType":"module"}