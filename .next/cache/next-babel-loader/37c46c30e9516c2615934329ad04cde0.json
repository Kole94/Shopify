{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, DescriptionList } from '@shopify/polaris';\n\nconst mapStateToProps = state => {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nclass Nutrition extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: 1\n    });\n  }\n\n  DataTableExample() {\n    const rows = [['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'], ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'], ['Navy Merino Wool Blazer with khaki chinos and yellow belt', '$445.00', 124518, 32, '$14,240.00']];\n  }\n\n  render() {\n    return __jsx(Card, {\n      className: \"Nutrition\"\n    }, __jsx(DescriptionList, {\n      items: [{\n        term: 'Logistics',\n        description: 'The management of products or other resources as they travel between a point of origin and a destination.'\n      }, {\n        term: 'Sole proprietorship',\n        description: 'A business structure where a single individual both owns and runs the company.'\n      }, {\n        term: 'Discount code',\n        description: 'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\n        description: 'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.'\n      }]\n    }), __jsx(Page, {\n      title: \"Sales by product\"\n    }, __jsx(Card, null, __jsx(DataTable, {\n      columnContentTypes: ['text', 'numeric', 'numeric', 'numeric', 'numeric'],\n      headings: ['Product', 'Price', 'SKU Number', 'Net quantity', 'Net sales'],\n      rows: rows,\n      totals: ['', '', '', 255, '$155,830.00']\n    }))), __jsx(\"div\", {\n      itemtype: \"http://schema.org/NutritionInformation\",\n      className: \"nf uk\"\n    }, __jsx(\"div\", {\n      className: \"nf-title\"\n    }, \"Nutrition\"), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Typical Values\"), __jsx(\"th\", null, \"Per 100g\"), __jsx(\"th\", null, __jsx(\"input\", {\n      type: \"text\",\n      \"data-role\": \"none\",\n      onChange: event => this.setState({\n        units: event.target.value\n      }),\n      value: this.state.units,\n      \"aria-label\": \"Change the Quantity Textbox\",\n      className: \"nf-modifier-field\"\n    }), \"serving (\", this.state.Weight, \")\"), \" \", __jsx(\"th\", null, \"%*(\", this.state.Weight, \")\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", null, \"Energy\"), __jsx(\"td\", null, \" 1094kj\"), \" \", __jsx(\"td\", null, \" 2189kj\"), __jsx(\"td\", null)), \" \", __jsx(\"tr\", null, __jsx(\"td\", null), \" \", __jsx(\"td\", {\n      itemprop: \"calories\"\n    }, \" 262kcal\"), __jsx(\"td\", {\n      itemprop: \"calories\"\n    }, \" 523kcal\"), \" \", __jsx(\"td\", null, \" 26%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Total Fat\"), __jsx(\"td\", {\n      itemprop: \"fatContent\"\n    }, \" 24\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", {\n      itemprop: \"fatContent\"\n    }, \" 49\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", null, \" 70%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", {\n      className: \"nf-indent\"\n    }, \"Saturated Fat\"), __jsx(\"td\", {\n      itemprop: \"saturatedFatContent\"\n    }, \" 35\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", {\n      itemprop: \"saturatedFatContent\"\n    }, \" 69\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", null, \" 345%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Carbohydrate\"), \" \", __jsx(\"td\", {\n      itemprop: \"carbohydrateContent\"\n    }, \" 3.8\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", {\n      itemprop: \"carbohydrateContent\"\n    }, \" 7.6\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", null, \" 3%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", {\n      className: \"nf-indent\"\n    }, \"Sugars\"), \" \", __jsx(\"td\", {\n      itemprop: \"sugarContent\"\n    }, \" 11\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", {\n      itemprop: \"sugarContent\"\n    }, \" 23\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", null, \" 26%\")), __jsx(\"tr\", null, __jsx(\"td\", null, \"Fibre\"), \" \", __jsx(\"td\", {\n      itemprop: \"fiberContent\"\n    }, this.state.units * Math.round(this.props.Fiber / 2 * 10) / 10, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", {\n      itemprop: \"fiberContent\"\n    }, \" \", Math.floor(this.props.Fiber), __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", null)), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Protein\"), \" \", __jsx(\"td\", {\n      itemprop: \"proteinContent\"\n    }, this.state.units * Math.floor(this.props.Protein / 2), __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), __jsx(\"td\", {\n      itemprop: \"proteinContent\"\n    }, this.state.units * Math.floor(this.props.Protein), __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \" grams\")), \" \", __jsx(\"td\", null, \" \", 78 + Math.floor(this.props.Protein - 38) * 2, \"%\")), __jsx(\"tr\", null, __jsx(\"td\", null, \"Salt\"), \" \", __jsx(\"td\", {\n      itemprop: \"sodiumContent\"\n    }, \" 0.98\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \"grams\")), \" \", __jsx(\"td\", {\n      itemprop: \"sodiumContent\"\n    }, \" 2\", __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"g\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \"grams\")), __jsx(\"td\", null, \" 33%\"))), \" \", __jsx(\"tfoot\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n      colspan: \"4\"\n    }, __jsx(\"span\", null, \"* Reference intake of an average adult (8400kj/2000kcal)\"), __jsx(\"div\", {\n      className: \"nf-ingredient-statement\"\n    }, __jsx(\"strong\", null, \"Ingredients:\"), __jsx(\"div\", null, \"Swiss cheese, American cheese, more cheese and a burger.\")), __jsx(\"div\", {\n      className: \"nf-disclaimer\"\n    }, \"Disclaimer\")))))));\n  }\n\n}\n\nexport default connect(mapStateToProps)(Nutrition);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/Nutrition.js"],"names":["React","Component","Button","Layout","connect","Card","DescriptionList","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","Nutrition","units","DataTableExample","rows","render","term","description","event","setState","target","value","Math","round","props","floor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, DescriptionList } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass Nutrition extends Component {\n\n    state = {\n        units: 1\n    }\n\n    DataTableExample() {\n        const rows = [\n          ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n          ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n          [\n            'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n            '$445.00',\n            124518,\n            32,\n            '$14,240.00',\n          ],\n        ];\n          }\n    render(){\n        return(\n<Card className=\"Nutrition\">\n<DescriptionList\n  items={[\n    {\n      term: 'Logistics',\n      description:\n        'The management of products or other resources as they travel between a point of origin and a destination.',\n    },\n    {\n      term: 'Sole proprietorship',\n      description:\n        'A business structure where a single individual both owns and runs the company.',\n    },\n    {\n      term: 'Discount code',\n      description:\n        'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\n        description:\n        'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\n    \n    },\n  ]}\n/>\n\n<Page title=\"Sales by product\">\n    <Card>\n      <DataTable\n        columnContentTypes={[\n          'text',\n          'numeric',\n          'numeric',\n          'numeric',\n          'numeric',\n        ]}\n        headings={[\n          'Product',\n          'Price',\n          'SKU Number',\n          'Net quantity',\n          'Net sales',\n        ]}\n        rows={rows}\n        totals={['', '', '', 255, '$155,830.00']}\n      />\n    </Card>\n  </Page>\n    <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf uk\">\n        <div className=\"nf-title\">Nutrition</div> \n        <table>\n            <thead>\n                <tr>\n                <th>Typical Values</th>\n                <th>Per 100g</th> \n        <th>\n            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({units: event.target.value})}value={this.state.units} aria-label=\"Change the Quantity Textbox\"\n            className=\"nf-modifier-field\">\n            </input>\n            serving\n            \n              ({this.state.Weight})\n            </th> <th>%*({this.state.Weight})</th>\n            </tr>\n            </thead> \n            <tbody><tr><td>Energy</td> \n            <td> 1094kj</td> <td> 2189kj</td> \n            <td></td></tr> <tr><td></td> <td itemprop=\"calories\"> 262kcal</td> \n            <td itemprop=\"calories\"> 523kcal</td> <td> 26%</td></tr> <tr><td>Total Fat</td>\n             <td itemprop=\"fatContent\"> 24\n             <span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fatContent\"> 49\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 70%</td></tr> <tr><td className=\"nf-indent\">Saturated Fat</td> \n             <td itemprop=\"saturatedFatContent\"> 35<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"saturatedFatContent\"> 69\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 345%</td></tr> <tr><td>Carbohydrate</td> <td itemprop=\"carbohydrateContent\"> 3.8\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td itemprop=\"carbohydrateContent\"> 7.6<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td> 3%</td></tr> <tr>\n                 <td className=\"nf-indent\">Sugars</td> <td itemprop=\"sugarContent\"> 11\n                 <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td>\n                  <td itemprop=\"sugarContent\"> 23<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td> 26%</td></tr> \n                  <tr><td>Fibre</td> <td itemprop=\"fiberContent\">{this.state.units*Math.round((this.props.Fiber/2)* 10 ) / 10}<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fiberContent\"> {Math.floor(this.props.Fiber)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td></td></tr> <tr><td>Protein</td> <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein/2)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein)}<span aria-hidden=\"true\">g</span>\n        <span className=\"sr-only\"> grams</span></td> <td> {78 + Math.floor(this.props.Protein - 38)*2}%</td></tr> \n                  <tr><td>Salt</td> <td itemprop=\"sodiumContent\"> 0.98<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\">grams</span></td> <td itemprop=\"sodiumContent\"> 2\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\">grams</span></td> \n                  <td> 33%</td></tr></tbody> <tfoot><tr><td colspan=\"4\">\n                      <span>* Reference intake of an average adult (8400kj/2000kcal)</span> \n                      <div className=\"nf-ingredient-statement\"><strong>Ingredients:</strong>\n                       <div>Swiss cheese, American cheese, more cheese and a burger.</div></div> \n                       <div className=\"nf-disclaimer\">Disclaimer</div></td></tr></tfoot>\n                       </table>\n                       </div>\n                       </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(Nutrition);\n"]},"metadata":{},"sourceType":"module"}