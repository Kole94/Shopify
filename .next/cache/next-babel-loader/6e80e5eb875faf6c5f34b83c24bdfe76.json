{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextContainer, TextField, TextStyle } from '@shopify/polaris';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nvar View =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View, _Component);\n\n  function View(props) {\n    var _this;\n\n    _classCallCheck(this, View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));\n    _this.state = {\n      units: 1,\n      SaturatedF: 345\n    };\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var q = this.state.units * this.props.Weight / 200;\n      return __jsx(Card, {\n        title: \"Nutrition Facts\"\n      }, __jsx(Card.Section, null, __jsx(TextField, {\n        type: \"number\",\n        style: {\n          width: '20px'\n        },\n        onChange: function onChange(event) {\n          return _this2.setState({\n            units: event.target.value\n          });\n        },\n        value: this.state.units\n      }), __jsx(TextContainer, null, \"serving (\", this.state.units * this.props.Weight, \")\")), __jsx(Caption, null, \"Amount Per Serving\"), __jsx(\"div\", {\n        className: \"nf-calories\"\n      }, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, \"Calories\"), __jsx(\"span\", {\n        itemprop: \"calories\",\n        className: \"nf-pr\"\n      }, q * Math.floor(this.props.Calories))), __jsx(Card.Section, null, __jsx(Card, null, __jsx(DataTable, {\n        columnContentTypes: ['text', 'numeric'],\n        headings: ['Name', '% Daily Value*'],\n        rows: rows\n      })), __jsx(DescriptionList, {\n        items: [{\n          term: \"Total Fat \".concat(this.props.TotalFat),\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: \"Saturated Fat  \".concat(this.props.SaturatedFat),\n          description: \"\".concat(this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69)), \"%\")\n        }, {\n          term: 'Trans Fat ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Cholesterol ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Sodium ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Total Carbohydrates',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Dietary Fiber ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Includes 0ggrams Added Sugars',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Protein ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin A 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin C 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin D 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Calcium 460mg',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Potassium 4700mg',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Caffeine mg',\n          description: \"\".concat(this.props.Calories)\n        }]\n      })), __jsx(Card.Section, null, __jsx(TextContainer, null, \"The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\", __jsx(Caption, null, \"Ingredients:\"), \"Swiss cheese, American cheese, more cheese and a burger.\")));\n    }\n  }]);\n\n  return View;\n}(Component);\n\nexport default connect(mapStateToProps)(View);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/View.js"],"names":["React","Component","Button","Layout","connect","Card","Caption","DescriptionList","TextContainer","TextField","TextStyle","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","View","props","units","SaturatedF","q","width","event","setState","target","value","Math","floor","rows","term","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextContainer, TextField, TextStyle } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <Card title='Nutrition Facts'>\n                            <Card.Section>\n                                <TextField type=\"number\" style={{ width: '20px' }} onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units}></TextField>\n                                \n                                    <TextContainer>\n                                        serving ({this.state.units * (this.props.Weight)})\n                                    </TextContainer>\n                            </Card.Section>\n\n  \n\n\n                    <Caption>Amount Per Serving</Caption>\n\n                    <div className=\"nf-calories\">\n                        <TextStyle variation=\"strong\">Calories</TextStyle>\n                        <span itemprop=\"calories\" className=\"nf-pr\">{q * (Math.floor(this.props.Calories))}</span>\n                    </div>\n                    <Card.Section>\n                        <Card>\n                            <DataTable\n                                columnContentTypes={[\n                                    'text',\n                                    'numeric'\n                                ]}\n                                headings={[\n                                    'Name',\n                                    '% Daily Value*'\n                                ]}\n                                rows={rows}\n                            />\n                        </Card>\n                        <DescriptionList\n                            items={[\n                                {\n                                    term: `Total Fat ${this.props.TotalFat}`,\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: `Saturated Fat  ${this.props.SaturatedFat}`,\n                                    description: `${this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%`\n                                },\n                                {\n                                    term: 'Trans Fat ',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Cholesterol ',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Sodium ',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Total Carbohydrates',\n                                    description: `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Dietary Fiber ',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Includes 0ggrams Added Sugars',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Protein ',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Vitamin A 50IU',\n                                    description: `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Vitamin C 50IU',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Vitamin D 50IU',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Calcium 460mg',\n                                    description:\n                                        `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Potassium 4700mg',\n                                    description: `${this.props.Calories}`\n                                },\n                                {\n                                    term: 'Caffeine mg',\n                                    description:\n                                        `${this.props.Calories}`\n                                }\n                            ]}\n                        />\n\n                    </Card.Section>\n\n                    <Card.Section>\n                        <TextContainer>\n                        The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\n                        <Caption>Ingredients:</Caption>\n                        Swiss cheese, American cheese, more cheese and a burger.\n                        </TextContainer>\n\n                    </Card.Section>\n                   \n            </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n"]},"metadata":{},"sourceType":"module"}