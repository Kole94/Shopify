{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextField } from '@shopify/polaris';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nvar View =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View, _Component);\n\n  function View(props) {\n    var _this;\n\n    _classCallCheck(this, View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));\n    _this.state = {\n      units: 1,\n      SaturatedF: 345\n    };\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var q = this.state.units * this.props.Weight / 200;\n      return __jsx(Card, {\n        className: \"View\"\n      }, __jsx(\"div\", {\n        itemtype: \"http://schema.org/NutritionInformation\",\n        className: \"nf us\"\n      }, __jsx(Caption, null, \" Nutrition Facts\"), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"div\", {\n        className: \"nf-serving\"\n      }, __jsx(TextField, {\n        type: \"number\",\n        style: {\n          width: '20px'\n        },\n        onChange: function onChange(event) {\n          return _this2.setState({\n            units: event.target.value\n          });\n        },\n        value: this.state.units\n      }), __jsx(\"div\", {\n        className: \"nf-item-name\"\n      }, __jsx(\"div\", null, \"serving (\", this.state.units * this.props.Weight, \")\")))), __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), __jsx(\"div\", {\n        className: \"nf-amount-per-serving\"\n      }, \"Amount Per Serving\"), __jsx(\"div\", {\n        className: \"nf-calories\"\n      }, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, \"Calories\"), __jsx(\"span\", {\n        itemprop: \"calories\",\n        className: \"nf-pr\"\n      }, q * Math.floor(this.props.Calories))), __jsx(Card.Section, null, __jsx(DescriptionList, {\n        items: [{\n          term: \"Total Fat \".concat(this.props.TotalFat),\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: \"Saturated Fat  \".concat(this.props.SaturatedFat),\n          description: \"\".concat(this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69)), \"%\")\n        }, {\n          term: 'Trans Fat ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Cholesterol ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Sodium ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Total Carbohydrates',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Dietary Fiber ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Includes 0ggrams Added Sugars',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Protein ',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin A 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin C 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Vitamin D 50IU',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Calcium 460mg',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Potassium 4700mg',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Caffeine mg',\n          description: \"\".concat(this.props.Calories)\n        }]\n      })), __jsx(\"div\", {\n        className: \"nf-bar1\"\n      }), __jsx(\"div\", {\n        className: \"nf-line nf-text-right\"\n      }, __jsx(\"span\", {\n        className: \"nf-highlight nf-percent-dv\"\n      }, \"%\", __jsx(\"span\", null, \"Daily Value\"), \"*\")), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, \"75%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Total Fat\"), __jsx(\"span\", {\n        itemprop: \"fatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69)), \"%\"), __jsx(\"span\", null, \"Saturated Fat\"), __jsx(\"span\", {\n        itemprop: \"saturatedFatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", null, \"Trans Fat\"), __jsx(\"span\", {\n        itemprop: \"transFatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"  \", this.state.units * this.props.TransFat, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (3 + Math.floor((this.props.Cholesterol - 10) / 3)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Cholesterol\"), __jsx(\"span\", {\n        itemprop: \"cholesterolContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * this.props.Cholesterol, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Sodium\"), __jsx(\"span\", {\n        itemprop: \"sodiumContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * Math.floor(this.props.Sodium), \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Total Carbohydrates\"), __jsx(\"span\", {\n        itemprop: \"carbohydrateContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * Math.floor(this.props.Carbohydrate), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (60 + (Math.floor(this.props.Fiber) - 15) * 4), \"%\"), __jsx(\"span\", null, \"Dietary Fiber\"), __jsx(\"span\", {\n        itemprop: \"fiberContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * Math.floor(this.props.Fiber), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", null, \"Sugars\"), __jsx(\"span\", {\n        itemprop: \"sugarContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * Math.floor(this.props.Sugars), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent2\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, this.state.units * (2 * this.props.AddedSugars), \"%\"), __jsx(\"span\", null, __jsx(\"span\", null, \"Includes\"), \" \", __jsx(\"span\", {\n        itemprop: \"\"\n      }, this.state.units * this.props.AddedSugars, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"span\", null, \"Added Sugars\"))), \" \", __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Protein\"), __jsx(\"span\", {\n        itemprop: \"proteinContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, this.state.units * Math.floor(this.props.Protein), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), \" \", __jsx(\"div\", {\n        className: \"nf-vitamins\"\n      }, __jsx(\"div\", {\n        className: \"nf-vitamins\"\n      }, __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin A\"), 50 * this.props.A, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"IU\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" International Unit\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, this.state.units * this.props.A, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin C\"), \" 50\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, \"83%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin D\"), \" 0\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mcg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" micrograms\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, \"0%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Calcium\"), \" \", this.state.units * this.props.Calcium * 10 + 110, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, this.state.units * this.props.Calcium, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Iron\"), Math.floor(this.state.units * this.props.Iron / 6), __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, this.state.units * this.props.Iron, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Potassium\"), \" 5120\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, this.state.units * this.props.Potassium, \"%\")))), __jsx(\"div\", {\n        className: \"nf-bar1\"\n      }), \" \", __jsx(\"div\", null, __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Caffeine\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\")), \" \", __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), \" \", __jsx(\"div\", {\n        className: \"nf-footnote\"\n      }, __jsx(\"span\", null, \"The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\"), __jsx(\"div\", {\n        className: \"nf-ingredient-statement\"\n      }, __jsx(\"strong\", null, \"Ingredients:\"), __jsx(\"div\", null, \"Swiss cheese, American cheese, more cheese and a burger.\")))));\n    }\n  }]);\n\n  return View;\n}(Component);\n\nexport default connect(mapStateToProps)(View);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/View.js"],"names":["React","Component","Button","Layout","connect","Card","Caption","DescriptionList","TextField","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","View","props","units","SaturatedF","q","width","event","setState","target","value","Math","floor","term","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, Caption, DescriptionList, TextField } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <Card className=\"View\">\n                <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf us\">\n\n                    <Caption> Nutrition Facts</Caption>\n\n                    <div className=\"nf-line\">\n                        <div className=\"nf-serving\">\n                            <TextField type=\"number\" style={{width:'20px'}} onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units}></TextField>\n                            <div className=\"nf-item-name\">\n                                <div>\n                                    serving ({this.state.units * (this.props.Weight)})\n                                    </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"nf-bar2\"></div>\n                    <div className=\"nf-amount-per-serving\">Amount Per Serving</div>\n\n                    <div className=\"nf-calories\">\n                    <TextStyle variation=\"strong\">Calories</TextStyle>\n                        <span itemprop=\"calories\" className=\"nf-pr\">{q * (Math.floor(this.props.Calories))}</span>\n                    </div>\n                    <Card.Section>\n                    <DescriptionList\n                        items={[\n                            {\n                                term:`Total Fat ${this.props.TotalFat}`,\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: `Saturated Fat  ${this.props.SaturatedFat}`,\n                                description: `${this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%`\n                            },\n                            {\n                                term: 'Trans Fat ',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Cholesterol ',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Sodium ',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Total Carbohydrates',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Dietary Fiber ',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Includes 0ggrams Added Sugars',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Protein ',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin A 50IU',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin C 50IU',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Vitamin D 50IU',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Calcium 460mg',\n                                description:\n                                    `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Potassium 4700mg',\n                                description: `${this.props.Calories}`\n                            },\n                            {\n                                term: 'Caffeine mg',\n                                description:\n                                    `${this.props.Calories}`\n                            }\n                        ]}\n                    />\n\n                    </Card.Section>\n                    \n\n                    <div className=\"nf-bar1\"></div>\n                    <div className=\"nf-line nf-text-right\">\n                        <span className=\"nf-highlight nf-percent-dv\">%\n                            <span>Daily Value</span>*</span></div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">75%</span>\n                        <span className=\"nf-highlight\">Total Fat</span>\n                        <span itemprop=\"fatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%</span>\n                        <span>Saturated Fat</span>\n                        <span itemprop=\"saturatedFatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Trans Fat</span>\n                        <span itemprop=\"transFatContent\">\n                            <span aria-hidden=\"true\">  {this.state.units * this.props.TransFat}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (3 + Math.floor((this.props.Cholesterol - 10) / 3))}%</span>\n                        <span className=\"nf-highlight\">Cholesterol</span>\n                        <span itemprop=\"cholesterolContent\">\n                            <span aria-hidden=\"true\">{this.state.units * this.props.Cholesterol}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20))}%</span>\n                        <span className=\"nf-highlight\">Sodium</span>\n                        <span itemprop=\"sodiumContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Sodium))}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3))}%</span>\n                        <span className=\"nf-highlight\">Total Carbohydrates</span>\n                        <span itemprop=\"carbohydrateContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Carbohydrate))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (60 + (Math.floor(this.props.Fiber) - 15) * 4)}%</span>\n                        <span>Dietary Fiber</span>\n                        <span itemprop=\"fiberContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Fiber))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span></div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Sugars</span>\n                        <span itemprop=\"sugarContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Sugars))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent2\"><span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units * (2 * this.props.AddedSugars)}%</span>\n                        <span><span>Includes</span> <span itemprop=\"\">{this.state.units * this.props.AddedSugars}<span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></span>\n                            <span>Added Sugars</span></span></div> <div className=\"nf-line\"><span className=\"nf-highlight\">Protein</span>\n                        <span itemprop=\"proteinContent\">\n                            <span aria-hidden=\"true\">{this.state.units * (Math.floor(this.props.Protein))}g</span><span className=\"sr-only\"> grams</span></span></div>\n                    <div className=\"nf-bar2\"></div> <div className=\"nf-vitamins\"><div className=\"nf-vitamins\">\n                        <div className=\"nf-vitamin-column\"><span>Vitamin A</span>{50 * this.props.A}<span aria-hidden=\"true\">IU</span>\n                            <span className=\"sr-only\"> International Unit</span> <span aria-hidden=\"true\" className=\"nf-pr\">{this.state.units * (this.props.A)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin C</span> 50<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">83%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin D</span> 0<span aria-hidden=\"true\">mcg</span>\n                            <span className=\"sr-only\"> micrograms</span> <span aria-hidden=\"true\" className=\"nf-pr\">0%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Calcium</span> {this.state.units * this.props.Calcium * 10 + 110}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Calcium)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Iron</span>{Math.floor(this.state.units * this.props.Iron / 6)}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Iron)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Potassium</span> 5120<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units * this.props.Potassium)}%</span></div></div></div>\n                    <div className=\"nf-bar1\"></div> <div><span className=\"nf-highlight\">Caffeine</span> <span aria-hidden=\"true\">mg</span>\n                        <span className=\"sr-only\"> milligrams</span></div> <div className=\"nf-bar2\"></div> <div className=\"nf-footnote\"><span>\n                            The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.</span>\n                        <div className=\"nf-ingredient-statement\">\n                            <strong>Ingredients:</strong>\n                            <div>Swiss cheese, American cheese, more cheese and a burger.</div>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n"]},"metadata":{},"sourceType":"module"}