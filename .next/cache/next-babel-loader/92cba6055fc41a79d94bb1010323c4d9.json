{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nvar View =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View, _Component);\n\n  function View(props) {\n    var _this;\n\n    _classCallCheck(this, View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));\n    _this.state = {\n      units: 1,\n      SaturatedF: 345\n    };\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var q = this.state.units * this.props.Weight / 200;\n      return __jsx(\"div\", {\n        className: \"View\"\n      }, __jsx(\"div\", {\n        itemtype: \"http://schema.org/NutritionInformation\",\n        className: \"nf us\"\n      }, __jsx(\"div\", {\n        className: \"nf-title\"\n      }, \"Nutrition Facts\"), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"div\", {\n        className: \"nf-serving\"\n      }, __jsx(\"input\", {\n        type: \"text\",\n        \"data-role\": \"none\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            units: event.target.value\n          });\n        },\n        value: this.state.units,\n        \"aria-label\": \"Change the Quantity Textbox\",\n        className: \"nf-modifier-field\"\n      }), __jsx(\"div\", {\n        className: \"nf-item-name\"\n      }, __jsx(\"div\", null, \"serving (\", this.state.units * this.props.Weight, \")\")))), __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), __jsx(\"div\", {\n        className: \"nf-amount-per-serving\"\n      }, \"Amount Per Serving\"), __jsx(\"div\", {\n        className: \"nf-calories\"\n      }, __jsx(\"span\", null, \"Calories\"), __jsx(\"span\", {\n        itemprop: \"calories\",\n        className: \"nf-pr\"\n      }, q * Math.floor(this.props.Calories))), __jsx(\"div\", {\n        className: \"nf-bar1\"\n      }), __jsx(\"div\", {\n        className: \"nf-line nf-text-right\"\n      }, __jsx(\"span\", {\n        className: \"nf-highlight nf-percent-dv\"\n      }, \"%\", __jsx(\"span\", null, \"Daily Value\"), \"*\")), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, \"75%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Total Fat\"), __jsx(\"span\", {\n        itemprop: \"fatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69)), \"%\"), __jsx(\"span\", null, \"Saturated Fat\"), __jsx(\"span\", {\n        itemprop: \"saturatedFatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", null, \"Trans Fat\"), __jsx(\"span\", {\n        itemprop: \"transFatContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"  \", q * this.props.TransFat, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (3 + Math.floor((this.props.Cholesterol - 10) / 3)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Cholesterol\"), __jsx(\"span\", {\n        itemprop: \"cholesterolContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * this.props.Cholesterol, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Sodium\"), __jsx(\"span\", {\n        itemprop: \"sodiumContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * Math.floor(this.props.Sodium), \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"))), __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3)), \"%\"), __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Total Carbohydrates\"), __jsx(\"span\", {\n        itemprop: \"carbohydrateContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * Math.floor(this.props.Carbohydrate), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (60 + (Math.floor(this.props.Fiber) - 15) * 4), \"%\"), __jsx(\"span\", null, \"Dietary Fiber\"), __jsx(\"span\", {\n        itemprop: \"fiberContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * Math.floor(this.props.Fiber), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent\"\n      }, __jsx(\"span\", null, \"Sugars\"), __jsx(\"span\", {\n        itemprop: \"sugarContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * Math.floor(this.props.Sugars), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-line nf-indent2\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-highlight nf-pr\"\n      }, q * (2 * this.props.AddedSugars), \"%\"), __jsx(\"span\", null, __jsx(\"span\", null, \"Includes\"), \" \", __jsx(\"span\", {\n        itemprop: \"\"\n      }, q * this.props.AddedSugars, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"span\", null, \"Added Sugars\"))), \" \", __jsx(\"div\", {\n        className: \"nf-line\"\n      }, __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Protein\"), __jsx(\"span\", {\n        itemprop: \"proteinContent\"\n      }, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, q * Math.floor(this.props.Protein), \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\"))), __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), \" \", __jsx(\"div\", {\n        className: \"nf-vitamins\"\n      }, __jsx(\"div\", {\n        className: \"nf-vitamins\"\n      }, __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin A\"), 50 * this.props.A, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"IU\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" International Unit\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, q * this.props.A, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin C\"), \" 50\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, \"83%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Vitamin D\"), \" 0\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mcg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" micrograms\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, \"0%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Calcium\"), \" \", q * this.props.Calcium * 10 + 110, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, q * this.props.Calcium, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Iron\"), Math.floor(q * this.props.Iron / 6), __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, q * this.props.Iron, \"%\")), __jsx(\"div\", {\n        className: \"nf-vitamin-column\"\n      }, __jsx(\"span\", null, \"Potassium\"), \" 5120\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"nf-pr\"\n      }, q * this.props.Potassium, \"%\")))), __jsx(\"div\", {\n        className: \"nf-bar1\"\n      }), \" \", __jsx(\"div\", null, __jsx(\"span\", {\n        className: \"nf-highlight\"\n      }, \"Caffeine\"), \" \", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"mg\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" milligrams\")), \" \", __jsx(\"div\", {\n        className: \"nf-bar2\"\n      }), \" \", __jsx(\"div\", {\n        className: \"nf-footnote\"\n      }, __jsx(\"span\", null, \"The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.\"), __jsx(\"div\", {\n        className: \"nf-ingredient-statement\"\n      }, __jsx(\"strong\", null, \"Ingredients:\"), __jsx(\"div\", null, \"Swiss cheese, American cheese, more cheese and a burger.\")))));\n    }\n  }]);\n\n  return View;\n}(Component);\n\nexport default connect(mapStateToProps)(View);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/View.js"],"names":["React","Component","Button","Layout","connect","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","View","props","units","SaturatedF","q","event","setState","target","value","Math","floor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <div className=\"View\">\n                <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf us\">\n\n                    <div className=\"nf-title\">Nutrition Facts</div>\n\n                    <div className=\"nf-line\">\n                        <div className=\"nf-serving\">\n                            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units} aria-label=\"Change the Quantity Textbox\" className=\"nf-modifier-field\"></input>\n                            <div className=\"nf-item-name\">\n                                <div>\n                                    serving ({this.state.units * (this.props.Weight)})\n                                    </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"nf-bar2\"></div>\n                    <div className=\"nf-amount-per-serving\">Amount Per Serving</div>\n\n                    <div className=\"nf-calories\">\n                        <span>Calories</span>\n                        <span itemprop=\"calories\" className=\"nf-pr\">{q*(Math.floor(this.props.Calories))}</span>\n                    </div>\n\n                    <div className=\"nf-bar1\"></div>\n                    <div className=\"nf-line nf-text-right\">\n                        <span className=\"nf-highlight nf-percent-dv\">%\n                            <span>Daily Value</span>*</span></div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">75%</span>\n                        <span className=\"nf-highlight\">Total Fat</span>\n                        <span itemprop=\"fatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%</span>\n                        <span>Saturated Fat</span>\n                        <span itemprop=\"saturatedFatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Trans Fat</span>\n                        <span itemprop=\"transFatContent\">\n                            <span aria-hidden=\"true\">  {q *this.props.TransFat}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(3 + Math.floor((this.props.Cholesterol - 10)/3))}%</span>\n                        <span className=\"nf-highlight\">Cholesterol</span>\n                        <span itemprop=\"cholesterolContent\">\n        <span aria-hidden=\"true\">{q *this.props.Cholesterol}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20))}%</span>\n                        <span className=\"nf-highlight\">Sodium</span>\n                        <span itemprop=\"sodiumContent\">\n                            <span aria-hidden=\"true\">{q *(Math.floor(this.props.Sodium))}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3))}%</span>\n                        <span className=\"nf-highlight\">Total Carbohydrates</span>\n                        <span itemprop=\"carbohydrateContent\">\n                            <span aria-hidden=\"true\">{q *(Math.floor(this.props.Carbohydrate))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(60 + (Math.floor(this.props.Fiber) - 15) * 4)}%</span>\n                        <span>Dietary Fiber</span>\n                        <span itemprop=\"fiberContent\">\n                            <span aria-hidden=\"true\">{q *(Math.floor(this.props.Fiber))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span></div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Sugars</span>\n                        <span itemprop=\"sugarContent\">\n                            <span aria-hidden=\"true\">{q *(Math.floor(this.props.Sugars))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent2\"><span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{q *(2 * this.props.AddedSugars)}%</span>\n                        <span><span>Includes</span> <span itemprop=\"\">{q *this.props.AddedSugars}<span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></span>\n                            <span>Added Sugars</span></span></div> <div className=\"nf-line\"><span className=\"nf-highlight\">Protein</span>\n                        <span itemprop=\"proteinContent\">\n        <span aria-hidden=\"true\">{q *(Math.floor(this.props.Protein))}g</span><span className=\"sr-only\"> grams</span></span></div>\n                    <div className=\"nf-bar2\"></div> <div className=\"nf-vitamins\"><div className=\"nf-vitamins\">\n                        <div className=\"nf-vitamin-column\"><span>Vitamin A</span>{50*this.props.A}<span aria-hidden=\"true\">IU</span>\n        <span className=\"sr-only\"> International Unit</span> <span aria-hidden=\"true\" className=\"nf-pr\">{q *(this.props.A)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin C</span> 50<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">83%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin D</span> 0<span aria-hidden=\"true\">mcg</span>\n                            <span className=\"sr-only\"> micrograms</span> <span aria-hidden=\"true\" className=\"nf-pr\">0%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Calcium</span> {q * this.props.Calcium * 10 + 110}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(q * this.props.Calcium)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Iron</span>{Math.floor(q * this.props.Iron / 6)}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(q * this.props.Iron)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Potassium</span> 5120<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(q * this.props.Potassium)}%</span></div></div></div>\n                    <div className=\"nf-bar1\"></div> <div><span className=\"nf-highlight\">Caffeine</span> <span aria-hidden=\"true\">mg</span>\n                        <span className=\"sr-only\"> milligrams</span></div> <div className=\"nf-bar2\"></div> <div className=\"nf-footnote\"><span>\n                            The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.</span>\n                        <div className=\"nf-ingredient-statement\">\n                            <strong>Ingredients:</strong>\n                            <div>Swiss cheese, American cheese, more cheese and a burger.</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n"]},"metadata":{},"sourceType":"module"}