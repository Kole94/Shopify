{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, DescriptionList, DataTable } from '@shopify/polaris';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Weight: state.inputReducer.Weight,\n    Calories: state.inputReducer.Calories,\n    TotalFat: state.inputReducer.TotalFat,\n    SaturatedFat: state.inputReducer.SaturatedFat,\n    TransFat: state.inputReducer.TransFat,\n    Cholesterol: state.inputReducer.Cholesterol,\n    Sodium: state.inputReducer.Sodium,\n    Carbohydrate: state.inputReducer.Carbohydrate,\n    Fiber: state.inputReducer.Fiber,\n    Sugars: state.inputReducer.Sugars,\n    AddedSugars: state.inputReducer.AddedSugars,\n    Protein: state.inputReducer.Protein,\n    A: state.inputReducer.A,\n    C: state.inputReducer.C,\n    D: state.inputReducer.D,\n    Calcium: state.inputReducer.Calcium,\n    Iron: state.inputReducer.Iron,\n    Potassium: state.inputReducer.Potassium\n  };\n};\n\nvar Nutrition =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Nutrition, _Component);\n\n  function Nutrition() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Nutrition);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Nutrition)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      units: 1\n    });\n\n    return _this;\n  }\n\n  _createClass(Nutrition, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rows = [['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'], ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'], ['Navy Merino Wool Blazer with khaki chinos and yellow belt', '$445.00', 124518, 32, '$14,240.00']];\n      return __jsx(Card, {\n        className: \"Nutrition\"\n      }, __jsx(DataTable, {\n        columnContentTypes: ['text', 'numeric', 'numeric', 'numeric', 'numeric'],\n        headings: ['Typical Values', 'Per 100g', \"serving(\".concat(this.props.Weight, \"g)\"), \"%*(\".concat(this.props.Weight, \")g\")],\n        rows: rows,\n        totals: ['', '', '', 255, '$155,830.00']\n      }), __jsx(DescriptionList, {\n        items: [{\n          term: 'Calories',\n          description: \"\".concat(this.props.Calories)\n        }, {\n          term: 'Sole proprietorship',\n          description: \"\".concat(this.props.Calories)\n        }]\n      }), __jsx(DescriptionList, {\n        items: [{\n          term: \"Energy\",\n          description: \"1094kj\\t21888kj\"\n        }, {\n          term: \"\",\n          description: \"      \\t262kcal\\t5231kcal\\t262%\"\n        }, {\n          term: \"Total Fat\",\n          description: \"24ggrams\\t486ggrams\\t694%\"\n        }, {\n          term: 'Saturated Fat',\n          description: \"35g\\t694g\\t3470%\"\n        }, {\n          term: 'Carbohydrate ',\n          description: \"\\t3.8ggrams\\t76ggrams\\t29%\"\n        }, {\n          term: 'Sugars ',\n          description: \"11ggrams\\t226ggrams\\t251%\"\n        }, {\n          term: 'Fibre',\n          description: \" \\t7.6ggrams\\t152g\"\n        }, {\n          term: 'Protein',\n          description: \"19ggrams\\t390ggrams\\t780%\"\n        }, {\n          term: 'Salt',\n          description: \"\\t0.98ggrams\\t20ggrams\\t325%\"\n        }]\n      }), __jsx(\"div\", {\n        itemtype: \"http://schema.org/NutritionInformation\",\n        className: \"nf uk\"\n      }, __jsx(\"div\", {\n        className: \"nf-title\"\n      }, \"Nutrition\"), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Typical Values\"), __jsx(\"th\", null, \"Per 100g\"), __jsx(\"th\", null, __jsx(\"input\", {\n        type: \"text\",\n        \"data-role\": \"none\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            units: event.target.value\n          });\n        },\n        value: this.state.units,\n        \"aria-label\": \"Change the Quantity Textbox\",\n        className: \"nf-modifier-field\"\n      }), \"serving (\", this.state.Weight, \")\"), \" \", __jsx(\"th\", null, \"%*(\", this.state.Weight, \")\"))), __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", null, \"Energy\"), __jsx(\"td\", null, \" 1094kj\"), \" \", __jsx(\"td\", null, \" 2189kj\"), __jsx(\"td\", null)), \" \", __jsx(\"tr\", null, __jsx(\"td\", null), \" \", __jsx(\"td\", {\n        itemprop: \"calories\"\n      }, \" 262kcal\"), __jsx(\"td\", {\n        itemprop: \"calories\"\n      }, \" 523kcal\"), \" \", __jsx(\"td\", null, \" 26%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Total Fat\"), __jsx(\"td\", {\n        itemprop: \"fatContent\"\n      }, \" 24\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", {\n        itemprop: \"fatContent\"\n      }, \" 49\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", null, \" 70%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", {\n        className: \"nf-indent\"\n      }, \"Saturated Fat\"), __jsx(\"td\", {\n        itemprop: \"saturatedFatContent\"\n      }, \" 35\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", {\n        itemprop: \"saturatedFatContent\"\n      }, \" 69\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", null, \" 345%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Carbohydrate\"), \" \", __jsx(\"td\", {\n        itemprop: \"carbohydrateContent\"\n      }, \" 3.8\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", {\n        itemprop: \"carbohydrateContent\"\n      }, \" 7.6\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", null, \" 3%\")), \" \", __jsx(\"tr\", null, __jsx(\"td\", {\n        className: \"nf-indent\"\n      }, \"Sugars\"), \" \", __jsx(\"td\", {\n        itemprop: \"sugarContent\"\n      }, \" 11\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", {\n        itemprop: \"sugarContent\"\n      }, \" 23\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", null, \" 26%\")), __jsx(\"tr\", null, __jsx(\"td\", null, \"Fibre\"), \" \", __jsx(\"td\", {\n        itemprop: \"fiberContent\"\n      }, this.state.units * Math.round(this.props.Fiber / 2 * 10) / 10, __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", {\n        itemprop: \"fiberContent\"\n      }, \" \", Math.floor(this.props.Fiber), __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", null)), \" \", __jsx(\"tr\", null, __jsx(\"td\", null, \"Protein\"), \" \", __jsx(\"td\", {\n        itemprop: \"proteinContent\"\n      }, this.state.units * Math.floor(this.props.Protein / 2), __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), __jsx(\"td\", {\n        itemprop: \"proteinContent\"\n      }, this.state.units * Math.floor(this.props.Protein), __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \" grams\")), \" \", __jsx(\"td\", null, \" \", 78 + Math.floor(this.props.Protein - 38) * 2, \"%\")), __jsx(\"tr\", null, __jsx(\"td\", null, \"Salt\"), \" \", __jsx(\"td\", {\n        itemprop: \"sodiumContent\"\n      }, \" 0.98\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \"grams\")), \" \", __jsx(\"td\", {\n        itemprop: \"sodiumContent\"\n      }, \" 2\", __jsx(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, \"g\"), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \"grams\")), __jsx(\"td\", null, \" 33%\"))), \" \", __jsx(\"tfoot\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n        colspan: \"4\"\n      }, __jsx(\"span\", null, \"* Reference intake of an average adult (8400kj/2000kcal)\"), __jsx(\"div\", {\n        className: \"nf-ingredient-statement\"\n      }, __jsx(\"strong\", null, \"Ingredients:\"), __jsx(\"div\", null, \"Swiss cheese, American cheese, more cheese and a burger.\")), __jsx(\"div\", {\n        className: \"nf-disclaimer\"\n      }, \"Disclaimer\")))))));\n    }\n  }]);\n\n  return Nutrition;\n}(Component);\n\nexport default connect(mapStateToProps)(Nutrition);","map":{"version":3,"sources":["/home/kole/fullStack/candu/pages/Nutrition.js"],"names":["React","Component","Button","Layout","connect","Card","DescriptionList","DataTable","mapStateToProps","state","Weight","inputReducer","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","Nutrition","units","rows","props","term","description","event","setState","target","value","Math","round","floor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\nimport { Card, DescriptionList, DataTable  } from '@shopify/polaris';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass Nutrition extends Component {\n\n    state = {\n        units: 1\n    }\n\n    render(){\n      const rows = [\n        ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n        ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n        [\n          'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n          '$445.00',\n          124518,\n          32,\n          '$14,240.00',\n        ],\n      ];\n        return(\n<Card className=\"Nutrition\">\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Typical Values',\n            'Per 100g',\n            `serving(${this.props.Weight}g)`,\n            `%*(${this.props.Weight})g`\n            ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n<DescriptionList\n  items={[\n    {\n      term: 'Calories',\n      description:\n      `${this.props.Calories}`\n    },\n    {\n      term: 'Sole proprietorship',\n      description:`${this.props.Calories}`}\n  ]}\n/>\n\n\n      {/* <DataTable\n        columnContentTypes={[\n          'text',\n          'numeric'\n        ]}\n        \n        rows={rows}\n      /> */}\n\n<DescriptionList\n                        items={[\n                            {\n                                term: `Energy`,\n                                description:`1094kj\t21888kj`\n                            },\n                            {\n                                term: ``,\n                                description:`      \t262kcal\t5231kcal\t262%`\n                            },\n                            {\n                                term: `Total Fat`,\n                                description: `24ggrams\t486ggrams\t694%`,\n                            },\n                            {\n                                term: 'Saturated Fat',\n                                description:`35g\t694g\t3470%`\n                            },\n                            {\n                                term: 'Carbohydrate ',\n                                description:`\t3.8ggrams\t76ggrams\t29%`\n                            },\n                            {\n                                term: 'Sugars ',\n                                description:`11ggrams\t226ggrams\t251%`\n                            },\n                            {\n                                term: 'Fibre',\n                                description: ` \t7.6ggrams\t152g`\n                            },\n                            {\n                                term: 'Protein',\n                                description:`19ggrams\t390ggrams\t780%`\n                            },\n                            {\n                                term: 'Salt',\n                                description:`\t0.98ggrams\t20ggrams\t325%`\n                            }\n                        ]}\n                    />\n    <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf uk\">\n        <div className=\"nf-title\">Nutrition</div> \n        <table>\n            <thead>\n                <tr>\n                <th>Typical Values</th>\n                <th>Per 100g</th> \n        <th>\n            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({units: event.target.value})}value={this.state.units} aria-label=\"Change the Quantity Textbox\"\n            className=\"nf-modifier-field\">\n            </input>\n            serving\n            \n              ({this.state.Weight})\n            </th> <th>%*({this.state.Weight})</th>\n            </tr>\n            </thead> \n            <tbody><tr><td>Energy</td> \n            <td> 1094kj</td> <td> 2189kj</td> \n            <td></td></tr> <tr><td></td> <td itemprop=\"calories\"> 262kcal</td> \n            <td itemprop=\"calories\"> 523kcal</td> <td> 26%</td></tr> <tr><td>Total Fat</td>\n             <td itemprop=\"fatContent\"> 24\n             <span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fatContent\"> 49\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 70%</td></tr> <tr><td className=\"nf-indent\">Saturated Fat</td> \n             <td itemprop=\"saturatedFatContent\"> 35<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"saturatedFatContent\"> 69\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 345%</td></tr> <tr><td>Carbohydrate</td> <td itemprop=\"carbohydrateContent\"> 3.8\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td itemprop=\"carbohydrateContent\"> 7.6<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td> 3%</td></tr> <tr>\n                 <td className=\"nf-indent\">Sugars</td> <td itemprop=\"sugarContent\"> 11\n                 <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td>\n                  <td itemprop=\"sugarContent\"> 23<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td> 26%</td></tr> \n                  <tr><td>Fibre</td> <td itemprop=\"fiberContent\">{this.state.units*Math.round((this.props.Fiber/2)* 10 ) / 10}<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fiberContent\"> {Math.floor(this.props.Fiber)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td></td></tr> <tr><td>Protein</td> <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein/2)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein)}<span aria-hidden=\"true\">g</span>\n        <span className=\"sr-only\"> grams</span></td> <td> {78 + Math.floor(this.props.Protein - 38)*2}%</td></tr> \n                  <tr><td>Salt</td> <td itemprop=\"sodiumContent\"> 0.98<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\">grams</span></td> <td itemprop=\"sodiumContent\"> 2\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\">grams</span></td> \n                  <td> 33%</td></tr></tbody> <tfoot><tr><td colspan=\"4\">\n                      <span>* Reference intake of an average adult (8400kj/2000kcal)</span> \n                      <div className=\"nf-ingredient-statement\"><strong>Ingredients:</strong>\n                       <div>Swiss cheese, American cheese, more cheese and a burger.</div></div> \n                       <div className=\"nf-disclaimer\">Disclaimer</div></td></tr></tfoot>\n                       </table>\n                       </div>\n                       </Card>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(Nutrition);\n"]},"metadata":{},"sourceType":"module"}