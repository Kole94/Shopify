{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  Weight: 200,\n  Calories: 523.1247,\n  TotalFat: 48.5941,\n  SaturatedFat: 69.3748,\n  TransFat: 0,\n  Cholesterol: 10,\n  Sodium: 780.2844,\n  Carbohydrate: 7.5555,\n  Fiber: 15.1524,\n  Sugars: 22.6127,\n  AddedSugars: 0,\n  Protein: 38.9961,\n  A: 1,\n  C: 2,\n  D: 0,\n  Calcium: 35,\n  Iron: 1,\n  Potassium: 100\n};\nexport var inputReducer = function inputReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_WEIGHT':\n      return _objectSpread({}, state, {\n        Weight: action.payload\n      });\n\n    case 'SET_CALORIES':\n      return _objectSpread({}, state, {\n        Calories: action.payload\n      });\n\n    case 'SET_TOTALFAT':\n      return _objectSpread({}, state, {\n        TotalFat: action.payload\n      });\n\n    case 'SET_SATURATEDFET':\n      return _objectSpread({}, state, {\n        SaturatedFat: action.payload\n      });\n\n    case 'SET_CHOLESTEROL':\n      return _objectSpread({}, state, {\n        Cholesterol: action.payload\n      });\n\n    case 'SET_TRANSFAT':\n      return _objectSpread({}, state, {\n        TransFat: action.payload\n      });\n\n    case 'SET_SODIUM':\n      return _objectSpread({}, state, {\n        Sodium: action.payload\n      });\n\n    case 'SET_CARBOHYDRATE':\n      return _objectSpread({}, state, {\n        Carbohydrate: action.payload\n      });\n\n    case 'SET_FIBER':\n      return _objectSpread({}, state, {\n        Fiber: action.payload\n      });\n\n    case 'SET_SUGARS':\n      return _objectSpread({}, state, {\n        Sugars: action.payload\n      });\n\n    case 'SET_ADDEDSUGARS':\n      return _objectSpread({}, state, {\n        AddedSugars: action.payload\n      });\n\n    case 'SET_PROTEIN':\n      return _objectSpread({}, state, {\n        Protein: action.payload\n      });\n\n    case 'SET_A':\n      return _objectSpread({}, state, {\n        A: action.payload\n      });\n\n    case 'SET_C':\n      return _objectSpread({}, state, {\n        C: action.payload\n      });\n\n    case 'SET_D':\n      return _objectSpread({}, state, {\n        D: action.payload\n      });\n\n    case 'SET_CALCIUM':\n      return _objectSpread({}, state, {\n        Calcium: action.payload\n      });\n\n    case 'SET_IRON':\n      return _objectSpread({}, state, {\n        Iron: action.payload\n      });\n\n    case 'SET_POTASSIUM':\n      return _objectSpread({}, state, {\n        Potassium: action.payload\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};","map":{"version":3,"sources":["/home/kole/fullStack/candu/redux/reducers.js"],"names":["initialState","Weight","Calories","TotalFat","SaturatedFat","TransFat","Cholesterol","Sodium","Carbohydrate","Fiber","Sugars","AddedSugars","Protein","A","C","D","Calcium","Iron","Potassium","inputReducer","state","action","type","payload"],"mappings":"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","sourcesContent":["\n\nexport const initialState = {\n    Weight: 200,\n    Calories: 523.1247,\n    TotalFat: 48.5941,\n    SaturatedFat: 69.3748,\n    TransFat: 0,\n    Cholesterol: 10,\n    Sodium: 780.2844,\n    Carbohydrate: 7.5555,\n    Fiber: 15.1524,\n    Sugars: 22.6127,\n    AddedSugars: 0,\n    Protein: 38.9961,\n    A: 1,\n    C: 2,\n    D: 0,\n    Calcium: 35,\n    Iron: 1,\n    Potassium: 100\n};\n\nexport const inputReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_WEIGHT':\n                        return {\n                ...state,\n                Weight: action.payload\n            }\n\n        case 'SET_CALORIES':\n            return {\n                ...state,\n                Calories: action.payload\n            }\n\n        case 'SET_TOTALFAT':\n            return {\n                ...state,\n                TotalFat: action.payload\n            }\n\n        case 'SET_SATURATEDFET':\n            return {\n                ...state,\n                SaturatedFat: action.payload\n            }\n\n        case 'SET_CHOLESTEROL':\n            return {\n                ...state,\n                Cholesterol: action.payload\n            }\n\n        case 'SET_TRANSFAT':\n            return {\n                ...state,\n                TransFat: action.payload\n\n            }\n\n        case 'SET_SODIUM':\n            return {\n                ...state,\n                Sodium: action.payload\n            }\n\n        case 'SET_CARBOHYDRATE':\n            return {\n                ...state,\n                Carbohydrate: action.payload\n            }\n\n        case 'SET_FIBER':\n            return {\n                ...state,\n                Fiber: action.payload\n            }\n        case 'SET_SUGARS':\n\n            return {\n                ...state,\n                Sugars: action.payload\n            }\n        case 'SET_ADDEDSUGARS':\n            return {\n                ...state,\n                AddedSugars: action.payload\n            }\n        case 'SET_PROTEIN':\n            return {\n                ...state,\n                Protein: action.payload\n            }\n        case 'SET_A':\n            return {\n                ...state,\n                A: action.payload\n\n            }\n        case 'SET_C':\n            return {\n                ...state,\n                C: action.payload\n\n            }\n        case 'SET_D':\n            return {\n                ...state,\n                D: action.payload\n            }\n        case 'SET_CALCIUM':\n            return {\n                ...state,\n                Calcium: action.payload\n            }\n        case 'SET_IRON':\n            return {\n                ...state,\n                Iron: action.payload\n            }\n\n        case 'SET_POTASSIUM':\n            return {\n                ...state,\n                Potassium: action.payload\n            }\n        default:\n            return {\n                ...state\n            }\n\n    }\n\n};"]},"metadata":{},"sourceType":"module"}