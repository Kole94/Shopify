{"version":3,"file":"static/development/pages/Label.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./pages/Inputbox.js","webpack:///./pages/Label.js","webpack:///./pages/Nutrition.js","webpack:///./pages/View.js","webpack:///./redux/ActionCreator.js","webpack:///external \"@shopify/polaris\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"react\"","webpack:///external \"react-redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"core-js/library/fn/object/define-property\");","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    setWeight, setCalories, setTotalFat, setSaturatedFat, setCholesterol, setTransFat, setSodium,\n    setCarbohydrate, setFiber, setSugars, setAddedSugars, setProtein, setA, setC, setD,\n    setCalcium, setIron, setPotassium\n} from '../redux/ActionCreator';\nimport { TextField, FormLayout, Form } from '@shopify/polaris';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setWeight: (event) => dispatch(setWeight(event)),\n        setCalories: (event) => dispatch(setCalories(event)),\n        setTotalFat: (event) => dispatch(setTotalFat(event)),\n        setSaturatedFat: (event) => dispatch(setSaturatedFat(event)),\n        setTransFat: (event) => dispatch(setTransFat(event)),\n        setCholesterol: (event) => dispatch(setCholesterol(event)),\n        setSodium: (event) => dispatch(setSodium(event)),\n        setCarbohydrate: (event) => dispatch(setCarbohydrate(event)),\n        setFiber: (event) => dispatch(setFiber(event)),\n        setSugars: (event) => dispatch(setSugars(event)),\n        setAddedSugars: (event) => dispatch(setAddedSugars(event)),\n        setProtein: (event) => dispatch(setProtein(event)),\n        setA: (event) => dispatch(setA(event)),\n        setC: (event) => dispatch(setC(event)),\n        setD: (event) => dispatch(setD(event)),\n        setCalcium: (event) => dispatch(setCalcium(event)),\n        setIron: (event) => dispatch(setIron(event)),\n        setPotassium: (event) => dispatch(setPotassium(event))\n    }\n}\n\n\nclass Inputbox extends Component {\n    \n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount = () => {\n        console.log('comdidmount')\n    }\n\n    render() {\n        return (\n            <Form className='Inputbox'>\n                <FormLayout className='inputform'>\n                    <p><label>Serving Weight</label><TextField className='inputfield' onChange={this.props.setWeight} value={this.props.Weight} type=\"number\"></TextField></p>\n                    <p><label>Calories</label><TextField className='inputfield' onChange={this.props.setCalories} value={this.props.Calories} type=\"number\"></TextField></p>\n                    <p><label>Total Fat</label><TextField className='inputfield' onChange={this.props.setTotalFat} value={this.props.TotalFat} type=\"number\"></TextField></p>\n                    <p><label>Saturated Fat</label><TextField className='inputfield' onChange={this.props.setSaturatedFat} value={this.props.SaturatedFat} type=\"number\"></TextField></p>\n                    <p><label>Trans Fat</label> <TextField className='inputfield' onChange={this.props.setTransFat} value={this.props.TransFat} type=\"number\"></TextField></p>\n                    <p><label>Cholesterol</label> <TextField className='inputfield' onChange={this.props.setCholesterol} value={this.props.Cholesterol} type=\"number\"></TextField></p>\n                    <p><label>Sodium</label> <TextField className='inputfield' onChange={this.props.setSodium} value={this.props.Sodium} type=\"number\"></TextField></p>\n                    <p><label>Carbohydrate</label> <TextField className='inputfield' onChange={this.props.setCarbohydrate} value={this.props.Carbohydrate} type=\"number\"></TextField></p>\n                    <p><label>Fiber</label> <TextField className='inputfield' onChange={this.props.setFiber} value={this.props.Fiber} type=\"number\"></TextField></p>\n                    <p><label>Sugars</label> <TextField className='inputfield' onChange={this.props.setSugars} value={this.props.Sugars} type=\"number\"></TextField></p>\n                    <p><label>Added Sugars</label> <TextField className='inputfield' onChange={this.props.setAddedSugars} value={this.props.AddedSugars} type=\"number\"></TextField></p>\n                    <p><label>Protein</label> <TextField className='inputfield' onChange={this.props.setProtein} value={this.props.Protein} type=\"number\"></TextField></p>\n                    <p><label>Vitamin A</label> <TextField className='inputfield' onChange={this.props.setA} value={this.props.A} type=\"number\"></TextField></p>\n                    <p><label>Vitamin C</label> <TextField className='inputfield' onChange={this.props.setC} value={this.props.C} type=\"number\"></TextField></p>\n                    <p><label>Vitamin D</label> <TextField className='inputfield' onChange={this.props.setD} value={this.props.D} type=\"number\"></TextField></p>\n                    <p><label>Calcium</label> <TextField className='inputfield' onChange={this.props.setCalcium} value={this.props.Calcium} type=\"number\"></TextField></p>\n                    <p><label>Iron</label> <TextField className='inputfield' onChange={this.props.setIron} value={this.props.Iron} type=\"number\"></TextField></p>\n                    <p><label>Potassium</label> <TextField className='inputfield' onChange={this.props.setPotassium} value={this.props.Potassium} type=\"number\"></TextField></p>\n                </FormLayout>\n            </Form>\n\n        )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Inputbox);\n\n\n","import React from 'react';\nimport Inputbox from './Inputbox'\nimport { AppProvider } from '@shopify/polaris';\nimport '@shopify/polaris/styles.css';\nimport View from './View';\nimport Nutrition from './Nutrition';\nimport { Provider } from 'react-redux';\nimport { EmptyState, Layout, Page } from '@shopify/polaris';\n\nfunction Label() {\n    return (\n        <Page>\n            <div className='title'>\n                <h1>Vue Nutrition Label</h1>\n            </div>\n            <div className='content'>\n                <Inputbox />\n                <View />\n                <Nutrition />\n            </div>\n        </Page>);\n}\n\nexport default Label;","import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass Nutrition extends Component {\n\n    state = {\n        units: 1\n    }\n    render(){\n        return(\n<div className=\"Nutrition\">\n    <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf uk\">\n        <div className=\"nf-title\">Nutrition</div> \n        <table>\n            <thead>\n                <tr>\n                <th>Typical Values</th>\n                <th>Per 100g</th> \n        <th>\n            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({units: event.target.value})}value={this.state.units} aria-label=\"Change the Quantity Textbox\"\n            className=\"nf-modifier-field\">\n            </input>\n            serving\n            \n              ({this.state.Weight})\n            </th> <th>%*({this.state.Weight})</th>\n            </tr>\n            </thead> \n            <tbody><tr><td>Energy</td> \n            <td> 1094kj</td> <td> 2189kj</td> \n            <td></td></tr> <tr><td></td> <td itemprop=\"calories\"> 262kcal</td> \n            <td itemprop=\"calories\"> 523kcal</td> <td> 26%</td></tr> <tr><td>Total Fat</td>\n             <td itemprop=\"fatContent\"> 24\n             <span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fatContent\"> 49\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 70%</td></tr> <tr><td className=\"nf-indent\">Saturated Fat</td> \n             <td itemprop=\"saturatedFatContent\"> 35<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td itemprop=\"saturatedFatContent\"> 69\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td> 345%</td></tr> <tr><td>Carbohydrate</td> <td itemprop=\"carbohydrateContent\"> 3.8\n             <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n             <td itemprop=\"carbohydrateContent\"> 7.6<span aria-hidden=\"true\">g</span>\n             <span className=\"sr-only\"> grams</span></td> <td> 3%</td></tr> <tr>\n                 <td className=\"nf-indent\">Sugars</td> <td itemprop=\"sugarContent\"> 11\n                 <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td>\n                  <td itemprop=\"sugarContent\"> 23<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td> 26%</td></tr> \n                  <tr><td>Fibre</td> <td itemprop=\"fiberContent\">{this.state.units*Math.round((this.props.Fiber/2)* 10 ) / 10}<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\"> grams</span></td> <td itemprop=\"fiberContent\"> {Math.floor(this.props.Fiber)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td></td></tr> <tr><td>Protein</td> <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein/2)}\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></td> \n                  <td itemprop=\"proteinContent\">{this.state.units*Math.floor(this.props.Protein)}<span aria-hidden=\"true\">g</span>\n        <span className=\"sr-only\"> grams</span></td> <td> {78 + Math.floor(this.props.Protein - 38)*2}%</td></tr> \n                  <tr><td>Salt</td> <td itemprop=\"sodiumContent\"> 0.98<span aria-hidden=\"true\">g</span>\n                  <span className=\"sr-only\">grams</span></td> <td itemprop=\"sodiumContent\"> 2\n                  <span aria-hidden=\"true\">g</span><span className=\"sr-only\">grams</span></td> \n                  <td> 33%</td></tr></tbody> <tfoot><tr><td colspan=\"4\">\n                      <span>* Reference intake of an average adult (8400kj/2000kcal)</span> \n                      <div className=\"nf-ingredient-statement\"><strong>Ingredients:</strong>\n                       <div>Swiss cheese, American cheese, more cheese and a burger.</div></div> \n                       <div className=\"nf-disclaimer\">Disclaimer</div></td></tr></tfoot>\n                       </table>\n                       </div>\n                       </div>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(Nutrition);\n","import React, { Component } from 'react';\nimport { Button, Layout } from '@shopify/polaris';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        Weight: state.inputReducer.Weight,\n        Calories: state.inputReducer.Calories,\n        TotalFat: state.inputReducer.TotalFat,\n        SaturatedFat: state.inputReducer.SaturatedFat,\n        TransFat: state.inputReducer.TransFat,\n        Cholesterol: state.inputReducer.Cholesterol,\n        Sodium: state.inputReducer.Sodium,\n        Carbohydrate: state.inputReducer.Carbohydrate,\n        Fiber: state.inputReducer.Fiber,\n        Sugars: state.inputReducer.Sugars,\n        AddedSugars: state.inputReducer.AddedSugars,\n        Protein: state.inputReducer.Protein,\n        A: state.inputReducer.A,\n        C: state.inputReducer.C,\n        D: state.inputReducer.D,\n        Calcium: state.inputReducer.Calcium,\n        Iron: state.inputReducer.Iron,\n        Potassium: state.inputReducer.Potassium\n\n    }\n}\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            units: 1,\n            SaturatedF: 345\n        }\n    }\n    render() {\n        var q = this.state.units * this.props.Weight / 200;\n        return (\n            <div className=\"View\">\n                <div itemtype=\"http://schema.org/NutritionInformation\" className=\"nf us\">\n\n                    <div className=\"nf-title\">Nutrition Facts</div>\n\n                    <div className=\"nf-line\">\n                        <div className=\"nf-serving\">\n                            <input type=\"text\" data-role=\"none\" onChange={(event) => this.setState({ units: event.target.value })} value={this.state.units} aria-label=\"Change the Quantity Textbox\" className=\"nf-modifier-field\"></input>\n                            <div className=\"nf-item-name\">\n                                <div>\n                                    serving ({this.state.units * (this.props.Weight)})\n                                    </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"nf-bar2\"></div>\n                    <div className=\"nf-amount-per-serving\">Amount Per Serving</div>\n\n                    <div className=\"nf-calories\">\n                        <span>Calories</span>\n                        <span itemprop=\"calories\" className=\"nf-pr\">{q*(Math.floor(this.props.Calories))}</span>\n                    </div>\n\n                    <div className=\"nf-bar1\"></div>\n                    <div className=\"nf-line nf-text-right\">\n                        <span className=\"nf-highlight nf-percent-dv\">%\n                            <span>Daily Value</span>*</span></div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">75%</span>\n                        <span className=\"nf-highlight\">Total Fat</span>\n                        <span itemprop=\"fatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(this.state.SaturatedF + 5 * (Math.floor(this.props.SaturatedFat) - 69))}%</span>\n                        <span>Saturated Fat</span>\n                        <span itemprop=\"saturatedFatContent\">\n                            <span aria-hidden=\"true\">g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Trans Fat</span>\n                        <span itemprop=\"transFatContent\">\n                            <span aria-hidden=\"true\">  {this.state.units*this.props.TransFat}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(3 + Math.floor((this.props.Cholesterol - 10)/3))}%</span>\n                        <span className=\"nf-highlight\">Cholesterol</span>\n                        <span itemprop=\"cholesterolContent\">\n        <span aria-hidden=\"true\">{this.state.units*this.props.Cholesterol}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(33 + Math.floor((Math.floor(this.props.Sodium) - 780) / 20))}%</span>\n                        <span className=\"nf-highlight\">Sodium</span>\n                        <span itemprop=\"sodiumContent\">\n                            <span aria-hidden=\"true\">{this.state.units*(Math.floor(this.props.Sodium))}mg</span>\n                            <span className=\"sr-only\"> milligrams</span>\n                        </span>\n                    </div>\n\n                    <div className=\"nf-line\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(3 + Math.floor((Math.floor(this.props.Carbohydrate) - 7) / 3))}%</span>\n                        <span className=\"nf-highlight\">Total Carbohydrates</span>\n                        <span itemprop=\"carbohydrateContent\">\n                            <span aria-hidden=\"true\">{this.state.units*(Math.floor(this.props.Carbohydrate))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent\">\n                        <span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(60 + (Math.floor(this.props.Fiber) - 15) * 4)}%</span>\n                        <span>Dietary Fiber</span>\n                        <span itemprop=\"fiberContent\">\n                            <span aria-hidden=\"true\">{this.state.units*(Math.floor(this.props.Fiber))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span></div>\n\n                    <div className=\"nf-line nf-indent\">\n                        <span>Sugars</span>\n                        <span itemprop=\"sugarContent\">\n                            <span aria-hidden=\"true\">{this.state.units*(Math.floor(this.props.Sugars))}g</span>\n                            <span className=\"sr-only\"> grams</span>\n                        </span>\n                    </div>\n                    <div className=\"nf-line nf-indent2\"><span aria-hidden=\"true\" className=\"nf-highlight nf-pr\">{this.state.units*(2 * this.props.AddedSugars)}%</span>\n                        <span><span>Includes</span> <span itemprop=\"\">{this.state.units*this.props.AddedSugars}<span aria-hidden=\"true\">g</span><span className=\"sr-only\"> grams</span></span>\n                            <span>Added Sugars</span></span></div> <div className=\"nf-line\"><span className=\"nf-highlight\">Protein</span>\n                        <span itemprop=\"proteinContent\">\n        <span aria-hidden=\"true\">{this.state.units*(Math.floor(this.props.Protein))}g</span><span className=\"sr-only\"> grams</span></span></div>\n                    <div className=\"nf-bar2\"></div> <div className=\"nf-vitamins\"><div className=\"nf-vitamins\">\n                        <div className=\"nf-vitamin-column\"><span>Vitamin A</span>{50*this.props.A}<span aria-hidden=\"true\">IU</span>\n        <span className=\"sr-only\"> International Unit</span> <span aria-hidden=\"true\" className=\"nf-pr\">{this.state.units*(this.props.A)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin C</span> 50<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">83%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Vitamin D</span> 0<span aria-hidden=\"true\">mcg</span>\n                            <span className=\"sr-only\"> micrograms</span> <span aria-hidden=\"true\" className=\"nf-pr\">0%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Calcium</span> {this.state.units* this.props.Calcium * 10 + 110}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units* this.props.Calcium)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Iron</span>{Math.floor(this.state.units* this.props.Iron / 6)}<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units* this.props.Iron)}%</span></div>\n                        <div className=\"nf-vitamin-column\"><span>Potassium</span> 5120<span aria-hidden=\"true\">mg</span>\n                            <span className=\"sr-only\"> milligrams</span> <span aria-hidden=\"true\" className=\"nf-pr\">{(this.state.units* this.props.Potassium)}%</span></div></div></div>\n                    <div className=\"nf-bar1\"></div> <div><span className=\"nf-highlight\">Caffeine</span> <span aria-hidden=\"true\">mg</span>\n                        <span className=\"sr-only\"> milligrams</span></div> <div className=\"nf-bar2\"></div> <div className=\"nf-footnote\"><span>\n                            The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2000 calories a day is used for general nutrition advice.</span>\n                        <div className=\"nf-ingredient-statement\">\n                            <strong>Ingredients:</strong>\n                            <div>Swiss cheese, American cheese, more cheese and a burger.</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default connect(mapStateToProps)(View);\n","\nexport const setWeight = (event) => {\n    return {\n        type: 'SET_WEIGHT',\n        payload: event.target.value\n    }\n}\n\nexport const setCalories = (event) => {\n    return {\n        type: 'SET_CALORIES',\n        payload: event.target.value\n    }\n}\n\nexport const setTotalFat = (event) => {\n\n    return {\n        type: 'SET_TOTALFAT',\n        payload: event.target.value\n    }\n}\n\n\nexport const setSaturatedFat = (event) => {\n\n    return {\n        type: 'SET_SATURATEDFET',\n        payload: event.target.value\n\n    }\n}\n\nexport const setCholesterol = (event) => {\n\n    return {\n        type: 'SET_CHOLESTEROL',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\nexport const setTransFat = (event) => {\n    return {\n        type: 'SET_TRANSFAT',\n        payload: event.target.value\n\n    }\n}\n\nexport const setSodium = (event) => {\n\n    return {\n        type: 'SET_SODIUM',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\nexport const setCarbohydrate = (event) => {\n    return {\n        type: 'SET_CARBOHYDRATE',\n        payload: event.target.value\n\n    }\n}\n\nexport const setFiber = (event) => {\n\n    return {\n        type: 'SET_FIBER',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\nexport const setSugars = (event) => {\n    return {\n        type: 'SET_SUGARS',\n        payload: event.target.value\n\n    }\n}\n\nexport const setAddedSugars = (event) => {\n\n    return {\n        type: 'SET_ADDEDSUGARS',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\nexport const setProtein = (event) => {\n\n    return {\n        type: 'SET_PROTEIN',\n        payload: event.target.value\n\n    }\n}\n\nexport const setA = (event) => {\n\n    return {\n        type: 'SET_A',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\nexport const setC = (event) => {\n    return {\n        type: 'SET_C',\n        payload: event.target.value\n\n    }\n}\n\nexport const setD = (event) => {\n\n    return {\n        type: 'SET_D',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\nexport const setCalcium = (event) => {\n    return {\n        type: 'SET_CALCIUM',\n        payload: event.target.value\n\n    }\n}\n\nexport const setIron = (event) => {\n\n    return {\n        type: 'SET_IRON',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\nexport const setPotassium = (event) => {\n\n    return {\n        type: 'SET_POTASSIUM',\n        payload: event.target.value\n\n    \n\n        \n    }\n}\n\n\n\n\n","module.exports = require(\"@shopify/polaris\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAorCA;AACA;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AADA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AACA;AAjEA;AACA;AAmEA;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AACA;AAzIA;AACA;AA2IA;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAGA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AAFA;AAQA;;;;;;;;;;;;;;;;;;;;;;;ACpLA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}