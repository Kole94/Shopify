{"version":3,"file":"static/webpack/static/development/pages/index.js.a9e78ac96b8af3a1bb98.hot-update.js","sources":["webpack:///./components/ResourceList.js","webpack:///./pages/index.js","webpack:///./pages/metafiled.js"],"sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {\n  Card,\n  ResourceList,\n  Stack,\n  TextStyle,\n  Thumbnail\n} from '@shopify/polaris';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport store from 'store-js';\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        vendor\n        handle\n        descriptionHtml\n        id\n        images(first: 3) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  static contextType = Context;\n\n  render() {\n    console.log(store.get('ids'));\n    const app = this.context;\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(\n        Redirect.Action.APP,\n        '/edit-products',\n      );\n    };\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n\n    return (\n      <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loadingâ€¦</div>;\n          if (error) return <div>{error.message}</div>;\n          console.log(data);\n          return (\n            <Card>\n              <ResourceList\n                showHeader\n                resourceName={{ singular: 'Product', plural: 'Products' }}\n                items={data.nodes}\n                renderItem={item => {\n                  const media = (\n                    <Thumbnail\n                      source={\n                        item.images.edges[0]\n                          ? item.images.edges[0].node.originalSrc\n                          : ''\n                      }\n                      alt={\n                        item.images.edges[0]\n                          ? item.images.edges[0].node.altText\n                          : ''\n                      }\n                    />\n                  );\n                  const price = item.variants.edges[0].node.price;\n                  return (\n                    <ResourceList.Item\n                      id={item.id}\n                      media={media}\n                      accessibilityLabel={`View details for ${item.title}`}\n                      onClick={() => {\n                        store.set('item', item);\n                        redirectToProduct();\n                      }}\n                    >\n                      <Stack>\n                        <Stack.Item fill>\n                          <h3>\n                            <TextStyle variation=\"strong\">\n                              {item.title}\n                            </TextStyle>\n                          </h3>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>${price}</p>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>Expires on {twoWeeksFromNow} </p>\n                        </Stack.Item>\n                      </Stack>\n                    </ResourceList.Item>\n                  );\n                }}\n              />\n            </Card>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default ResourceListWithProducts;","import { EmptyState, Layout, Page } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../components/ResourceList';\nimport Metafields from './metafiled';\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n\nclass Index extends React.Component {\n  state = { open: false };\n\n  saveData() {\n    let query = {\n      query:\n        `mutation {\n        createProduct(productInput: {\n          title:\"wadwa\"\n          price:99\n        }){\n          price\n      }}`};\n    fetch('https://b61cbbeb.ngrok.io/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(query),\n    })\n      .then(resData => {\n        console.log('wads');\n      })\n      .catch(err => {\n        console.log('skoadks')\n        console.log(JSON.stringify(err, null, 2));\n      });\n  }\n  render() {\n\n\n    const emptyState = !store.get('ids');\n    return (\n      <Page>\n        <TitleBar\n          primaryAction={{\n            content: 'Select products',\n            onAction: () => this.setState({ open: true }),\n          }}\n        />\n        <ResourcePicker\n          resourceType=\"Product\"\n          showVariants={false}\n          open={this.state.open}\n          onSelection={(resources) => this.handleSelection(resources)}\n          onCancel={() => this.setState({ open: false })}\n        />\n        {emptyState ? (\n          <Layout>\n            <EmptyState\n              heading=\"Select products to start\"\n              action={{\n                content: 'Select products',\n                onAction: () => this.setState({ open: true })\n              }}\n              image={img}\n            >\n              <p>Select products and change their price temporarily</p>\n            </EmptyState>\n          </Layout>\n        ) : (\n              <ResourceListWithProducts />\n          )}\n\n      </Page>\n    );\n  }\n  handleSelection = (resources) => {\n    const idsFromResources = resources.selection.map((product) => product.id);\n    this.setState({ open: false });\n    store.set('ids', idsFromResources);\n  };\n}\n\nexport default Index;","import gql from 'graphql-tag';\n\nconst CREATE_METAFILED = gql`\nmutation productUpdate($input: ProductInput!) {\n  productUpdate(input: $input) {\n    product {\n      id\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`;\n\n\nclass Metafields extends React.Component {\n\n\n  render() {\n\n    console.log('METAFIELDS');\n\n    return (\n      <Mutation\n        mutation={CREATE_METAFILED}\n      >\n        {(handleSubmit, { error, data }) => {\n          const showError = error && (\n            <Banner status=\"critical\">{error.message}</Banner>\n          );\n\n          return (\n            <Frame>\n\n              <PageActions\n                primaryAction={[\n                  {\n                    content: 'Save',\n                    onAction: () => {\n                      const ProductInput = {\n                        id: \"gid://shopify/Product/4548010803335\",\n                        privateMetafields: [{\n                          key: \"abc\",\n                          namespace: \"name\",\n                          valueInput: {\n                            value: \"Petar\",\n                            valueType: STRING\n                          }\n                        },\n                        {\n                          key: \"def\",\n                          namespace: \"space\",\n                          valueInput: {\n                            value: \"Petrovic\",\n                            valueType: STRING\n                          }\n                        }]\n                      };\n                        handleSubmit({\n                          variables: { input: ProductInput },\n                        });\n                      },\n                    },\n                          ]}\n                secondaryActions={[\n                  {\n                    content: 'Remove discount'\n                  },\n                ]}\n              />\n\n            </Frame>\n          );\n        }}\n      </Mutation>\n    );\n  }\n}\n\n  export default Metafields;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AA6BA;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AANA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAEA;AAAA;AAcA;AA/CA;AAmDA;AAGA;;;;AA7EA;AACA;AADA;AACA;AA+EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AACA;AAmEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAvEA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AAEA;AAHA;AAKA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AANA;AAiBA;;;;AApEA;AACA;AA2EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AAEA;AACA;AAcA;;;;;;;;;;;;;AAGA;AAEA;AAEA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAVA;AAmBA;AACA;AAAA;AAAA;AADA;AAGA;AAzBA;AA4BA;AAEA;AADA;AA/BA;AAuCA;AAGA;;;;AA7DA;AACA;AA+DA;;;;A","sourceRoot":""}